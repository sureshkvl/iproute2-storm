// Generated by CoffeeScript 1.7.1
(function() {
  var exec, extend, util;

  util = require('util');

  extend = require('util')._extend;

  exec = require('child_process').exec;

  this.include = function() {
    var agent, plugindir;
    agent = this.settings.agent;
    if (agent == null) {
      throw new Error("this plugin requires to be running in the context of a valid StormAgent!");
    }
    plugindir = this.settings.plugindir;
    if (plugindir == null) {
      plugindir = "/var/stormflash/plugins/netstats";
    }
    this.get({
      '/netstats/link': function() {
        var command;
        command = "ip -s link";
        util.log("netstats executing " + command + "...");
        return exec(command, (function(_this) {
          return function(error, stdout, stderr) {
            var count, i, ob, output, result, tmparr, tmpvars, _i, _j, _len, _len1;
            util.log("netstats: execute - Error : " + error);
            util.log("netstats: execute - stdout : " + stdout);
            util.log("netstats: execute - stderr : " + stderr);
            String(output = stdout.toString());
            tmparr = [];
            tmparr = output.split("\n");
            util.log("tmparr " + tmparr);
            for (_i = 0, _len = tmparr.length; _i < _len; _i++) {
              i = tmparr[_i];
              util.log("i value " + i);
            }
            result = [];
            ob = {};
            count = 1;
            for (_j = 0, _len1 = tmparr.length; _j < _len1; _j++) {
              i = tmparr[_j];
              tmpvars = [];
              tmpvars = i.split(/[ ]+/);
              if (count === 1) {
                util.log("inside count 1 " + tmpvars);
                ob["interface"] = tmpvars[1];
                ob["status"] = tmpvars[2];
                ob["mtu"] = tmpvars[4];
                ob["qdisc"] = tmpvars[6];
                ob["state"] = tmpvars[8];
                ob["mode"] = tmpvars[10];
                ob["group"] = tmpvars[12];
              } else if (count === 2) {
                util.log("inside count2 " + tmpvars);
                ob["link"] = tmpvars[1];
                ob["brd"] = tmpvars[3];
              } else if (count === 4) {
                util.log("inside count4 " + tmpvars);
                ob["rxbytes"] = tmpvars[1];
                ob["rxpackets"] = tmpvars[2];
                ob["rxerror"] = tmpvars[3];
                ob["rxdropped"] = tmpvars[4];
                ob["rxoverrun"] = tmpvars[5];
                ob["rxmcast"] = tmpvars[6];
              } else if (count === 6) {
                util.log("inside count6 " + tmpvars);
                ob["txbytes"] = tmpvars[1];
                ob["txpackets"] = tmpvars[2];
                ob["txerrors"] = tmpvars[3];
                ob["txdropped"] = tmpvars[4];
                ob["txcarrier"] = tmpvars[5];
                ob["txcollisions"] = tmpvars[6];
                result.push(ob);
                ob = {};
                count = 0;
              } else {
                util.log("unknoiwn " + tmpvars);
              }
              count++;
              util.log("count value is " + count);
            }
            return _this.send(result);
          };
        })(this));
      }
    });
    return this.get({
      '/netstats/route': function() {
        var command;
        command = "ip -s route";
        util.log("netstats executing " + command + "...");
        return exec(command, (function(_this) {
          return function(error, stdout, stderr) {
            var count, i, ob, output, result, tmparr, tmpvars, vars, _i, _j, _k, _len, _len1, _len2;
            util.log("netstats: execute - Error : " + error);
            util.log("netstats: execute - stdout : " + stdout);
            util.log("netstats: execute - stderr : " + stderr);
            String(output = stdout.toString());
            tmparr = [];
            tmparr = output.split("\n");
            util.log("tmparr " + tmparr);
            for (_i = 0, _len = tmparr.length; _i < _len; _i++) {
              i = tmparr[_i];
              util.log("i value " + i);
            }
            result = [];
            count = 1;
            for (_j = 0, _len1 = tmparr.length; _j < _len1; _j++) {
              i = tmparr[_j];
              tmpvars = [];
              tmpvars = i.split(/[ ]+/);
              count = 0;
              ob = {};
              for (_k = 0, _len2 = tmpvars.length; _k < _len2; _k++) {
                vars = tmpvars[_k];
                util.log(" count " + count + " vars is " + vars + " tmpvars - count " + tmpvars[count] + " - value " + tmpvars[count + 1]);
                if (count === 0) {
                  util.log("destinametion takeing");
                  ob["destination"] = tmpvars[count];
                } else {
                  if (vars === "via") {
                    ob["via"] = tmpvars[count + 1];
                    util.log("via");
                  }
                  if (vars === "dev") {
                    ob["dev"] = tmpvars[count + 1];
                    util.log("dev");
                  }
                  if (vars === "proto") {
                    ob["proto"] = tmpvars[count + 1];
                    util.log("proto");
                  }
                  if (vars === "scope") {
                    ob["scope"] = tmpvars[count + 1];
                    util.log("scope");
                  }
                  if (vars === "src") {
                    ob["src"] = tmpvars[count + 1];
                    util.log("src");
                  }
                  if (vars === "metric") {
                    ob["metric"] = tmpvars[count + 1];
                    util.log("metric");
                  }
                }
                count++;
              }
              result.push(ob);
            }
            return _this.send(result);
          };
        })(this));
      }
    });
  };

}).call(this);
