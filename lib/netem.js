// Generated by CoffeeScript 1.7.1
(function() {
  var StormData, addDefaultGw, addStaticRoute, exec, extend, netemData, setBandwidth, setDelayLoss, setLinkChars, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  util = require('util');

  extend = require('util')._extend;

  exec = require('child_process').exec;

  StormData = require('stormdata');

  netemData = (function(_super) {
    var Schema;

    __extends(netemData, _super);

    Schema = {
      name: "netem",
      type: "object",
      required: true,
      properties: {
        ifname: {
          "type": "string",
          "required": false
        },
        bandwidth: {
          "type": "string",
          "required": false
        },
        latency: {
          "type": "string",
          "required": false
        },
        jitter: {
          "type": "string",
          "required": false
        },
        pktloss: {
          "type": "string",
          "required": false
        }
      }
    };

    function netemData(id, data) {
      netemData.__super__.constructor.call(this, id, data, Schema);
    }

    return netemData;

  })(StormData);

  setDelayLoss = function(data, callback) {
    var command, correlation, distribution, ifname, latency, loss, variation;
    ifname = data.ifname;
    latency = data.latency;
    distribution = "normal";
    variation = data.jitter;
    correlation = "10%";
    loss = data.pktloss;
    correlation = "10%";
    command = "tc qdisc add dev " + ifname + " root handle 1:0  netem delay " + latency + " " + variation + " " + correlation + " distribution " + distribution + " loss " + loss + " " + correlation;
    util.log("netstats executing " + command + "...");
    exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        if (error != null) {
          return util.log("netstats: execute - Error : " + error);
        }
      };
    })(this));
    if (typeof stdout !== "undefined" && stdout !== null) {
      util.log("netstats: execute - stdout : " + stdout);
    }
    if (typeof stderr !== "undefined" && stderr !== null) {
      util.log("netstats: execute - stderr : " + stderr);
    }
    return callback(true);
  };


  /*
  setLoss = (data, callback)->
   *loss routine
   * tc qdisc change dev eth0 root netem loss 0.1%
  	 *return callback false unless data instanceof netemData
  	ifname = data.ifname
  	loss = data.pktloss
  	correlation = "10%"
  	command = "tc qdisc change dev #{ifname} root netem loss #{loss} #{correlation}"
  	util.log "netstats executing #{command}..."
  	exec command, (error, stdout, stderr) =>
  		util.log "netstats: execute - Error : " + error if error?
  		util.log "netstats: execute - stdout : " + stdout if stdout?
  		util.log "netstats: execute - stderr : " + stderr if stderr?
  		callback(true)
   */

  setBandwidth = function(data, callback) {
    var avgpkt, bandwidth, command, ifname;
    ifname = data.ifname;
    avgpkt = "1000";
    bandwidth = data.bandwidth;
    command = "tc qdisc add dev " + ifname + " parent 1:1 handle 10: tbf rate  " + bandwidth + " buffer 1600 limit 3000";
    util.log("netstats executing " + command + "...");
    return exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        if (error != null) {
          util.log("netstats: execute - Error : " + error);
        }
        if (stdout != null) {
          util.log("netstats: execute - stdout : " + stdout);
        }
        if (stderr != null) {
          util.log("netstats: execute - stderr : " + stderr);
        }
        return callback(true);
      };
    })(this));
  };

  setLinkChars = function(data, callback) {
    if (!(data instanceof netemData)) {
      return callback(false);
    }
    callback(true);
    return setDelayLoss(data.data, (function(_this) {
      return function(result) {
        util.log("setDelay result" + result);
        return setBandwidth(data.data, function(result) {
          return util.log("setBandwidth result " + result);
        });
      };
    })(this));
  };

  addDefaultGw = function(gwip, callback) {
    var command;
    command = "ip route add default via " + gwip;
    util.log("netstats executing " + command + "...");
    return exec(command, (function(_this) {
      return function(error, stdout, stderr) {
        if (error != null) {
          util.log("netstats: execute - Error : " + error);
        }
        if (stdout != null) {
          util.log("netstats: execute - stdout : " + stdout);
        }
        if (stderr != null) {
          util.log("netstats: execute - stderr : " + stderr);
        }
        return callback(true);
      };
    })(this));
  };

  addStaticRoute = function(data, callback) {};

  module.exports.netemdata = netemData;

  module.exports.setLinkChars = setLinkChars;

  module.exports.adddefaultgw = addDefaultGw;

}).call(this);
